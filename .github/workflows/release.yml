name: BuildRelease

on:
  push:
  # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Cache dependencies
      uses: actions/cache@v1
      with:
        path: .
        key: ${{ runner.OS }}-dependencies-cache
    
    - name: Cache yaml-cpp
      uses: actions/cache@v1
      with:
        path: /usr/local
        key: ${{ runner.OS }}-yaml-cpp-cache
    - name: update dependencies
      run: sudo apt-get update
    - name: Install dependencies
      run: sudo apt install git cmake build-essential libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-gfx1.2-dev zlib1g-dev
    - name: clone yaml-cpp library
      run: git clone https://github.com/jbeder/yaml-cpp ${{github.workspace}}/yaml-cpp
    - name: Configure yaml-cpp CMake
      working-directory: ${{github.workspace}}/yaml-cpp
      run: cmake -B ${{github.workspace}}/yaml-cpp/yaml-build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DYAML_CPP_BUILD_CONTRIB=OFF -DYAML_CPP_BUILD_TESTS=OFF -DYAML_CPP_BUILD_TOOLS=OFF
    - name: Build yaml-cpp
      working-directory: ${{github.workspace}}/yaml-cpp/yaml-build
      run: sudo make install
      

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Release -DDEV_BUILD=OFF -DBUILD_PACKAGE=OFF

    - name: Build
      working-directory: ${{github.workspace}}/build
      # Build your program with the given configuration
      run: make -j4
      
    - name: ls
      working-directory: ${{github.workspace}}/build/bin
      run: ls
      
        
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./${{github.workspace}}/build/bin
        asset_name: bin
        asset_content_type: application/bin
